#!/bin/bash
#
REPO_NAME_PP="pp"
REPO_NAME_PZ="pz"
REPO_NAME_PI="pi"
REPO_NAME_ORIGIN="origin"
#
REPO_URL_PP="$HOME/git"
REPO_URL_PZ="$HOME/git-big"
REPO_URL_PI="git@mnasoft.ddns.mksat.net:/opt/git"
REPO_URL_ORIGIN="//n000325/home/_namatv/_git"
#
REPO_XZ_PP="$HOME/xz"
REPO_XZ_PZ="$HOME/xz-big"
#
PUB_HTML_CLP_ARH="~/public_html/Common-Lisp-Programs/Archive/"
#
VAR_CACHE_PACMAN="/var/cache/pacman"
VAR_LIB_PACMAN="/var/lib/pacman"

####################################################################################################
#### func_clp_check_public
####################################################################################################

func_clp_check_public ()
{
    mkdir -p "${PUB_HTML_CLP_ARH}"
}

####################################################################################################
#### For remake-git
####################################################################################################

func_remove_git ()
{
    rm -rf $REPO_URL_PP/*.git
}

func_remake_git ()
{
    CDIR=`pwd`
    for i in `find . -name "*.git"`
    do
        cd $i/..
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo $i
        echo $NAME
        echo $BNAME
        cd ..
        git clone --bare $BNAME $REPO_URL_PP/$BNAME.git
        cd $CDIR
    done
}

####################################################################################################
#### remake-xz
####################################################################################################

func_remove_repo_xz_pp ()
{
    rm -f $REPO_XZ_PP/*.git.tar.xz
}

func_remake_xz_pp ()
{
    mkdir -p $REPO_XZ_PP
    cd $REPO_URL_PP
    for i in `find . -name "*.git"`
    do
        BNAME=`basename $i`
        echo $i
        echo $BNAME
        tar -cvvJf $BNAME.tar.xz $BNAME/
        mv $BNAME.tar.xz $REPO_XZ_PP/
    done
}

func_remove_repo_xz_pz ()
{
    rm -f $REPO_XZ_PZ/*.git.tar.xz
}

func_remake_xz_pz ()
{
    mkdir -p $REPO_XZ_PZ
    cd $REPO_URL_PZ
    for i in `find . -name "*.git"`
    do
        BNAME=`basename $i`
        echo $i
        echo $BNAME
        tar -cvvJf $BNAME.tar.xz $BNAME/
        mv $BNAME.tar.xz $REPO_XZ_PZ/
    done
}

####################################################################################################
#### git_tree
####################################################################################################

GIT_TREE_USAGE="
Usage: $(basename $0) COMMAND [BRANCH]

Command: 
        pull          - получение изменений с сервера;
        push          - отправка изменений на сервер;
        pullsh        - получение и отправка изменений;
        add           - добавление изменений;
        commit        - фиксация изменений;
        all           - получение изменений с сервера, добавление изменений,
                        фиксация изменений, отправка изменений на сервер;
        readd_pp      - удаление и повторное добавление удаленного
                        репозитория pp;
        readd_pz      - удаление и повторное добавление удаленного
                        репозитория pz;
        readd_pi      - удаление и повторное добавление удаленного
                        репозитория pi;
        readd_origin  - удаление и повторное добавление удаленного
                        репозитория origin;
        rm_pp         - удаление удаленного репозитория pp;
        rm_pz         - удаление удаленного репозитория pz;
        rm_pi         - удаление удаленного репозитория pi;
        rm_origin     - удаление удаленного репозитория origin;

        clone_bare_pp - клонирование дерева репозиториев в
                        расположение pp;
        clone_bare_pz - клонирование дерева репозиториев в
                        расположение pz;
        clone_bare_pi - клонирование дерева репозиториев в
                        расположение pi;
        clone_bare_or - клонирование дерева репозиториев в
                        расположение origin;

Описание:

         Выполняет поиск репозиториев git, начиная с текущего
         каталога. Для каздого из, найденных репозиториев выполняет
         команду COMMAND для всех удаленных репозиториев.

         Необязательный параметр BRANCH задает ветку,
         получаемую|отправляемую на удаленные сервера. Если он не
         задан синхронизируется текущая ветка.
"

func_git_tree_usage_show ()
{
    echo "${GIT_TREE_USAGE}"
}

func_git_tree_push ()
{
    for rpo in `git remote`
    do
        echo "--------------------"
        echo ">>> git push ${rpo} ${DO_BRANCH} <<<"
        git push ${rpo} ${DO_BRANCH}
        echo "--------------------"
    done
}

func_git_tree_pull ()
{
    for rpo in `git remote`
    do
        echo "--------------------"
        echo ">>> git pull ${rpo} ${DO_BRANCH} <<<"
        git pull ${rpo} ${DO_BRANCH}
        echo "--------------------"
    done
}

func_git_tree_add ()
{
    echo '--------------------'
    echo '>>> git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd"` <<<'
    git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd"`
# -o -name "*.scr" 
    
    echo '--------------------'
}

func_git_tree_readd_pp ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PP} <<<"
    git remote remove ${REPO_NAME_PP}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PP} ${REPO_URL_PP}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PP} ${REPO_URL_PP}/${REPO}.git
    echo '--------------------'
}

func_git_tree_readd_pz ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PZ} <<<"
    git remote remove ${REPO_NAME_PZ}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PZ} ${REPO_URL_PZ}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PZ} ${REPO_URL_PZ}/${REPO}.git
    echo '--------------------'
}

func_git_tree_readd_pi ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PI} <<<"
    git remote remove ${REPO_NAME_PI}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PI} ${REPO_URL_PI}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PI} ${REPO_URL_PI}/${REPO}.git
    echo '--------------------'
}

func_git_tree_readd_origin ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_ORIGIN} <<<"
    git remote remove ${REPO_NAME_ORIGIN}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_ORIGIN} ${REPO_URL_ORIGIN}/${REPO}.git <<<"
    git remote add ${REPO_NAME_ORIGIN} ${REPO_URL_ORIGIN}/${REPO}.git
    echo '--------------------'
}

func_git_rm_pp ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PP} <<<"
    git remote remove ${REPO_NAME_PP}
    echo '--------------------'
}

func_git_rm_pz ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PZ} <<<"
    git remote remove ${REPO_NAME_PZ}
    echo '--------------------'
}

func_git_rm_pi ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PI} <<<"
    git remote remove ${REPO_NAME_PI}
    echo '--------------------'
}

func_git_rm_origin ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_ORIGIN} <<<"
    git remote remove ${REPO_NAME_ORIGIN}
    echo '--------------------'
}

func_git_clone_bare_pp ()
{
    BASENAME=`pwd`
    DIR_NAME=`basename ${BASENAME}`
    echo '--------------------'
    echo ">>> git clone --bare . ${REPO_URL_PP}/${DIR_NAME}.git <<<"
    git clone --bare . ${REPO_URL_PP}/${DIR_NAME}.git
    echo '--------------------'
}

func_git_clone_bare_pz ()
{
    BASENAME=`pwd`
    DIR_NAME=`basename ${BASENAME}`
    echo '--------------------'
    echo ">>> git clone --bare . ${REPO_URL_PZ}/${DIR_NAME}.git <<<"
    git clone --bare . ${REPO_URL_PZ}/${DIR_NAME}.git
    echo '--------------------'
}

func_git_clone_bare_pi ()
{
    BASENAME=`pwd`
    DIR_NAME=`basename ${BASENAME}`
    echo '--------------------'
    echo ">>> git clone --bare . ${REPO_URL_PI}/${DIR_NAME}.git <<<"
    git clone --bare . ${REPO_URL_PI}/${DIR_NAME}.git
    echo '--------------------'
}

func_git_clone_bare_origin ()
{
    BASENAME=`pwd`
    DIR_NAME=`basename ${BASENAME}`
    echo '--------------------'
    echo ">>> git clone --bare . ${REPO_URL_ORIGIN}/${DIR_NAME}.git <<<"
    git clone --bare . ${REPO_URL_ORIGIN}/${DIR_NAME}.git
    echo '--------------------'
}


func_git_tree_commit ()
{
    echo '--------------------'
    echo '>>> git commit -a -m "`date -u`" <<<'
    git commit -a -m "`date -u`"
    echo '--------------------'
}

func_git_tree_push_or_pull ()
{
    for rpo in `git remote`
    do
    echo '--------------------'
    echo ">>> git ${COMMAND} ${rpo} ${DO_BRANCH} <<<"
    git ${COMMAND} ${rpo} ${DO_BRANCH}
    echo '--------------------'
    done
}

func_git_tree_command_branch ()
{
    CURRENT_BRANCH=`git branch --no-color | grep \*  | cut -d ' ' -f 2`
    if ! [[ -z "${BRANCH}" ]]
    then
        DO_BRANCH="${BRANCH}"
    else
        DO_BRANCH="${CURRENT_BRANCH}"
    fi
    
    if [[ ${COMMAND} == "push" || ${COMMAND} == "pull" ]]
    then
        func_git_tree_push_or_pull
    fi
    
    if [[ ${COMMAND} == "pullsh" ]]
    then
        func_git_tree_pull
        func_git_tree_push
    fi
    
    if [[ ${COMMAND} == "add" ]]
    then
        func_git_tree_add
    fi
    
    if [[ ${COMMAND} == "commit" ]]
    then
        func_git_tree_commit
    fi
    
    if [[ ${COMMAND} == "all" ]]
    then
        func_git_tree_pull
        func_git_tree_add
        func_git_tree_commit
        func_git_tree_push
    fi

    if [[ ${COMMAND} == "readd_pp" ]]
    then
        func_git_tree_readd_pp
    fi

    if [[ ${COMMAND} == "readd_pz" ]]
    then
        func_git_tree_readd_pz
    fi

    if [[ ${COMMAND} == "readd_pi" ]]
    then
        func_git_tree_readd_pi
    fi

    if [[ ${COMMAND} == "readd_origin" ]]
    then
        func_git_tree_readd_origin
    fi
    if [[ ${COMMAND} == "rm_origin" ]]
    then
        func_git_rm_origin
    fi
    if [[ ${COMMAND} == "clone_bare_pp" ]]
    then
        func_git_clone_bare_pp
    fi
    if [[ ${COMMAND} == "clone_bare_pz" ]]
    then
        func_git_clone_bare_pz
    fi
    if [[ ${COMMAND} == "clone_bare_pi" ]]
    then
        func_git_clone_bare_pp
    fi
    if [[ ${COMMAND} == "clone_bare_or" ]]
    then
        func_git_clone_bare_origin
    fi
}

func_git_tree_command ()
{
    CDIR=`pwd`
    for i in `find . -name ".git"`
    do
        echo "================================="
        cd ${CDIR}/${i}/../
        echo "`pwd`"
        echo "---------------------------------"
        func_git_tree_command_branch
        echo "+++++++++++++++++++++++++++++++++"
    done
    cd ${CDIR}
}

func_git_tree ()
{
    if ! [[ -z "$2" ]]
    then
        BRANCH=$2
        echo ${BRANCH}
    fi

    if [ -z "$1" ]
    then
        func_git_tree_usage_show
    else
        COMMAND=$1
        if [[ ${COMMAND} == "push"          || \
                  ${COMMAND} == "pull"          || \
                  ${COMMAND} == "pullsh"        || \
                  ${COMMAND} == "add"           || \
                  ${COMMAND} == "commit"        || \
                  ${COMMAND} == "all"           || \
                  ${COMMAND} == "readd_pp"      || \
                  ${COMMAND} == "readd_pz"      || \
                  ${COMMAND} == "readd_pi"      || \
                  ${COMMAND} == "readd_origin"  || \
                  ${COMMAND} == "rm_pp"         || \
                  ${COMMAND} == "rm_pz"         || \
                  ${COMMAND} == "rm_pi"         || \
                  ${COMMAND} == "rm_origin"     || \
                  ${COMMAND} == "clone_bare_pp" || \
                  ${COMMAND} == "clone_bare_pz" || \
                  ${COMMAND} == "clone_bare_pi" || \
                  ${COMMAND} == "clone_bare_or" ]]
        then
            func_git_tree_command
        else
            echo "Unknown command: ${COMMAND}"
            func_git_tree_usage_show
        fi
    fi
}

####################################################################################################
#### 
####################################################################################################
