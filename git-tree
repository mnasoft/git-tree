#!/bin/bash
#
REPO_NAME_PP="pp"
REPO_NAME_PZ="pz"
REPO_NAME_PI="pi"
REPO_NAME_OR="origin"
# 
REPO_GIT_PP_URL="$HOME/git"
REPO_GIT_PZ_URL="$HOME/git-big"
REPO_GIT_PI_URL="git@mnasoft.ddns.mksat.net:/opt/git"
REPO_GIT_OR_URL="//n000325/home/_namatv/_git"
# 
REPO_XZ_PP_URL="$HOME/xz"
REPO_XZ_PZ_URL="$HOME/xz-big"
# 
REPO_XZ_PP_TAR="xz.tar"
REPO_XZ_PZ_TAR="xz-big.tar"
#
PUB_HTML_CLP_ARH="$HOME/public_html/Common-Lisp-Programs/Archive"
#
VAR_CACHE_PACMAN="/var/cache/pacman"
VAR_LIB_PACMAN="/var/lib/pacman"

func_git_tree_echo_short ()
{
    # echo '--------------------'
    cd .
}

func_git_tree_echo_long ()
{
    # echo '---------------------------------'
    cd .
}

func_git_tree_echo_long_plus ()
{
    # echo '+++++++++++++++++++++++++++++++++'
    cd .
}

func_git_tree_echo_long_equal ()
{
    echo '================================================================================'
}
####################################################################################################
#### check_dir
####################################################################################################

check_dir_public_html_clp_arch ()
{
    echo "<<< mkdir -p ${PUB_HTML_CLP_ARH} >>>"
    mkdir -p ${PUB_HTML_CLP_ARH}
}

check_dir_git_pp ()
{
    echo "<<< mkdir -p ${REPO_GIT_PP_URL} >>>"
    mkdir -p ${REPO_GIT_PP_URL}
}

check_dir_git_pz ()
{
    echo "<<< mkdir -p ${REPO_GIT_PZ_URL} >>>"
    mkdir -p ${REPO_GIT_PZ_URL}
}

check_dir_xz_pp ()
{
    echo "<<< mkdir -p ${REPO_XZ_PP_URL} >>>"    
    mkdir -p ${REPO_XZ_PP_URL}
}

check_dir_xz_pz ()
{
    echo "<<< mkdir -p ${REPO_XZ_PZ_URL} >>>"
    mkdir -p ${REPO_XZ_PZ_URL}
}

####################################################################################################
#### remove_git
####################################################################################################

remove_git_pp ()
{
    echo "<<< rm -rf $REPO_GIT_PP_URL/*.git >>>"    
    rm -rf $REPO_GIT_PP_URL/*.git
}

remove_git_pz ()
{
    echo "<<< rm -rf $REPO_GIT_PZ_URL/*.git >>>"
    rm -rf $REPO_GIT_PZ_URL/*.git
}

remove_xz_pp ()
{
    rm -f $REPO_XZ_PP_URL/*.git.tar.xz
}

remove_xz_pz ()
{
    rm -f $REPO_XZ_PZ_URL/*.git.tar.xz
}

####################################################################################################
#### make_git 
####################################################################################################

make_git_pp ()
{
    CDIR=`pwd`
    for i in `find . -name "*.git"`
    do
        cd $i/..
        if [[ `git remote | grep pp` ]]
        then
            NAME=`pwd`
            BNAME=`basename $NAME`
            echo $i
            echo $NAME
            echo $BNAME
            cd ..
            git clone --bare $BNAME $REPO_GIT_PP_URL/$BNAME.git
        else
            cd ..
        fi
        cd $CDIR
    done
}

make_git_pz ()
{
    CDIR=`pwd`
    for i in `find . -name "*.git"`
    do
        cd $i/..
        if [[ `git remote | grep pz` ]]
        then
            NAME=`pwd`
            BNAME=`basename $NAME`
            echo $i
            echo $NAME
            echo $BNAME
            cd ..
            git clone --bare $BNAME $REPO_GIT_PZ_URL/$BNAME.git
        else
            cd ..
        fi
        cd $CDIR
    done
}

####################################################################################################
#### remake-xz 
####################################################################################################

remake_xz_pp ()
{
    remove_xz_pp
    check_dir_xz_pp
    cd $REPO_GIT_PP_URL
    for i in `find . -name "*.git"`
    do
        BNAME=`basename $i`
        echo $i
        echo $BNAME
        tar -cvvJf $BNAME.tar.xz $BNAME/
        mv $BNAME.tar.xz $REPO_XZ_PP_URL/
    done
}

remake_xz_pz ()
{
    remove_xz_pz   
    check_dir_xz_pz
    cd $REPO_GIT_PZ_URL
    for i in `find . -name "*.git"`
    do
        BNAME=`basename $i`
        echo $i
        echo $BNAME
        tar -cvvJf $BNAME.tar.xz $BNAME/
        mv $BNAME.tar.xz $REPO_XZ_PZ_URL/
    done
}

####################################################################################################
####
####################################################################################################

remake_git_pp ()
{
    # Выполняет пересоздание каталога ~/git, наполняя его чистыми
    # репозиториями. Поиск репозиротиев ведется в каталогах:
    # ~/quicklisp/local-projects/; ~/develop/; ~/elisp/.

    remove_git_pp
    
    cd ${HOME}/quicklisp/local-projects/
    make_git_pp

    cd ${HOME}/develop/
    make_git_pp

    cd ${HOME}/elisp/
    make_git_pp
}

remake_git_pz ()
{
    # Выполняет пересоздание каталога ~/git, наполняя его чистыми
    # репозиториями. Поиск репозиротиев ведется в каталогах:
    # ~/quicklisp/local-projects/; ~/develop/; ~/elisp/.

    remove_git_pz
    
    cd ${HOME}/quicklisp/local-projects/
    make_git_pz

    cd ${HOME}/develop/
    make_git_pz

    cd ${HOME}/elisp/
    make_git_pz
}

####################################################################################################
# remake_xz_pp_tar
####################################################################################################

remake_xz_pp_tar ()
{
    # Выполняет перенос в каталог ${PUB_HTML_CLP_ARH}/ архивов
    # git.tar.xz
    
    check_dir_public_html_clp_arch
    remake_xz_pp
    
    cd ${REPO_XZ_PP_URL}
    tar -cvvf ${REPO_XZ_PP_TAR} *.git.tar.xz
    mv -f ${REPO_XZ_PP_TAR} ${PUB_HTML_CLP_ARH}
}

remake_xz_pz_tar ()
{
    # Выполняет перенос в каталог ${PUB_HTML_CLP_ARH}/ архивов
    # git.tar.xz
    
    check_dir_public_html_clp_arch
    remake_xz_pz
    
    cd ${REPO_XZ_PZ_URL}
    tar -cvvf ${REPO_XZ_PZ_TAR} *.git.tar.xz
    mv -f ${REPO_XZ_PZ_TAR} ${PUB_HTML_CLP_ARH}
}

####################################################################################################
#### git_tree
####################################################################################################

GIT_TREE_USAGE="
Usage: 
   $(basename $0) COMMAND [BRANCH]
   $(basename $0) quicklisp
   $(basename $0) pacman
   $(basename $0) dot_emacs_d
   $(basename $0) remake_xz_pp
   $(basename $0) remake_xz_pz
   $(basename $0) xz_git
   $(basename $0) rs_local_pi
   $(basename $0) rs_pi_local
   $(basename $0) rs_pi_html
   $(basename $0) reclone

Command: 
    pull          - получение изменений с сервера;
    push          - отправка изменений на сервер;
    pullsh        - получение и отправка изменений;
    add           - добавление изменений;
    commit        - фиксация изменений;
    all           - получение изменений с сервера, добавление изменений,
                    фиксация изменений, отправка изменений на сервер;
        Удаление и повторное добавление удаленного репозитория:
    readd_pp      - pp;
    readd_pz      - pz;
    readd_pi      - pi;
    readd_or      - or;
       Удаление удаленного репозитория:
    rm_pp         -  pp;
    rm_pz         -  pz;
    rm_pi         -  pi;
    rm_or         -  or;
       Клонирование дерева репозиториев:
    clone_pp      - в размещение pp;
    clone_pz      - в размещение pz;
    clone_pi      - в размещение pi;
    clone_or      - в размещение or;

    remake_git_pp -

    remake_git_pz -

    remake_xz_pp_tar - создает архив ${REPO_XZ_PP_TAR} из файлов 
        с расширением .git.tar.xz, находящихся в каталоге 
        ${REPO_XZ_PP_URL}, и перемещает его в каталог 
        ${PUB_HTML_CLP_ARH};

    remake_xz_pz_tar - создает архив ${REPO_XZ_PZ_TAR} из файлов 
        с расширением .git.tar.xz, находящихся в каталоге 
        ${REPO_XZ_PZ_URL}, и перемещает его в каталог 
        ${PUB_HTML_CLP_ARH};

Описание:

         Выполняет поиск репозиториев git, начиная с текущего
         каталога. Для каздого из, найденных репозиториев выполняет
         команду COMMAND для всех удаленных репозиториев.

         Необязательный параметр BRANCH задает ветку,
         получаемую|отправляемую на удаленные сервера. Если он не
         задан синхронизируется текущая ветка.
"

func_git_tree_usage_show ()
{
    echo "${GIT_TREE_USAGE}"
}

func_git_tree_push ()
{
    for rpo in `git remote`
    do
        func_git_tree_echo_short
        echo ">>> git push ${rpo} ${DO_BRANCH} <<<"
        git push ${rpo} ${DO_BRANCH}
        func_git_tree_echo_short
    done
}

func_git_tree_pull ()
{
    for rpo in `git remote`
    do
        func_git_tree_echo_short
        echo ">>> git pull ${rpo} ${DO_BRANCH} <<<"
        git pull ${rpo} ${DO_BRANCH}
        func_git_tree_echo_short
    done
}

func_git_tree_add ()
{
    func_git_tree_echo_short
    echo '>>> git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd"` <<<'
    git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd"`
# -o -name "*.scr" 
    
    func_git_tree_echo_short
}

func_git_tree_readd_pp ()
{
    func_git_tree_echo_short
    echo ">>> git remote remove ${REPO_NAME_PP} <<<"
    git remote remove ${REPO_NAME_PP}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PP} ${REPO_GIT_PP_URL}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PP} ${REPO_GIT_PP_URL}/${REPO}.git
    func_git_tree_echo_short
}

func_git_tree_readd_pz ()
{
    func_git_tree_echo_short
    echo ">>> git remote remove ${REPO_NAME_PZ} <<<"
    git remote remove ${REPO_NAME_PZ}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PZ} ${REPO_GIT_PZ_URL}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PZ} ${REPO_GIT_PZ_URL}/${REPO}.git
    func_git_tree_echo_short
}

func_git_tree_readd_pi ()
{
    func_git_tree_echo_short
    echo ">>> git remote remove ${REPO_NAME_PI} <<<"
    git remote remove ${REPO_NAME_PI}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PI} ${REPO_GIT_PI_URL}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PI} ${REPO_GIT_PI_URL}/${REPO}.git
    func_git_tree_echo_short
}

func_git_tree_readd_or ()
{
    func_git_tree_echo_short
    echo ">>> git remote remove ${REPO_NAME_OR} <<<"
    git remote remove ${REPO_NAME_OR}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_OR} ${REPO_GIT_OR_URL}/${REPO}.git <<<"
    git remote add ${REPO_NAME_OR} ${REPO_GIT_OR_URL}/${REPO}.git
    func_git_tree_echo_short
}

func_git_rm_pp ()
{
    func_git_tree_echo_short
    echo ">>> git remote remove ${REPO_NAME_PP} <<<"
    git remote remove ${REPO_NAME_PP}
    func_git_tree_echo_short
}

func_git_rm_pz ()
{
    func_git_tree_echo_short
    echo ">>> git remote remove ${REPO_NAME_PZ} <<<"
    git remote remove ${REPO_NAME_PZ}
    func_git_tree_echo_short
}

func_git_rm_pi ()
{
    func_git_tree_echo_short
    echo ">>> git remote remove ${REPO_NAME_PI} <<<"
    git remote remove ${REPO_NAME_PI}
    func_git_tree_echo_short
}

func_git_rm_or ()
{
    func_git_tree_echo_short
    echo ">>> git remote remove ${REPO_NAME_OR} <<<"
    git remote remove ${REPO_NAME_OR}
    func_git_tree_echo_short
}

func_git_clone_pp ()
{
    if [[ `git remote | grep pp` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo ">>> git clone --bare . ${REPO_GIT_PP_URL}/${BNAME}.git <<<"
        git           clone --bare . ${REPO_GIT_PP_URL}/${BNAME}.git
    fi
    func_git_tree_echo_short
}

func_git_clone_pz ()
{
    if [[ `git remote | grep pz` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo ">>> git clone --bare . ${REPO_GIT_PZ_URL}/${BNAME}.git <<<"
        git           clone --bare . ${REPO_GIT_PZ_URL}/${BNAME}.git
    fi
    func_git_tree_echo_short
}

func_git_clone_pi ()
{
    if [[ `git remote | grep pi` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo ">>> git clone --bare . ${REPO_GIT_PI_URL}/${BNAME}.git <<<"
        git           clone --bare . ${REPO_GIT_PI_URL}/${BNAME}.git
    fi
    func_git_tree_echo_short
}

func_git_clone_or ()
{
    if [[ `git remote | grep origin` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo ">>> git clone --bare . ${REPO_GIT_OR_URL}/${BNAME}.git <<<"
        git           clone --bare . ${REPO_GIT_OR_URL}/${BNAME}.git
    fi
    func_git_tree_echo_short
}

func_git_tree_commit ()
{
    func_git_tree_echo_short
    echo '>>> git commit -a -m "`date -u`" <<<'
    git commit -a -m "`date -u`"
    func_git_tree_echo_short
}

func_git_tree_push_or_pull ()
{
    for rpo in `git remote`
    do
    func_git_tree_echo_short
    echo ">>> git ${COMMAND} ${rpo} ${DO_BRANCH} <<<"
    git ${COMMAND} ${rpo} ${DO_BRANCH}
    func_git_tree_echo_short
    done
}

func_git_tree_command_branch ()
{
    CURRENT_BRANCH=`git branch --no-color | grep \*  | cut -d ' ' -f 2`
    if ! [[ -z "${BRANCH}" ]]
    then
        DO_BRANCH="${BRANCH}"
    else
        DO_BRANCH="${CURRENT_BRANCH}"
    fi
# pull          - получение изменений с сервера;
# push          - отправка изменений на сервер;
    if [[ ${COMMAND} == "push" || ${COMMAND} == "pull" ]]
    then
        func_git_tree_push_or_pull
    fi
# pullsh        - получение и отправка изменений;    
    if [[ ${COMMAND} == "pullsh" ]]
    then
        func_git_tree_pull
        func_git_tree_push
    fi
# add - добавление изменений;    
    if [[ ${COMMAND} == "add" ]]
    then
        func_git_tree_add
    fi
# commit        - фиксация изменений;    
    if [[ ${COMMAND} == "commit" ]]
    then
        func_git_tree_commit
    fi
# all           - получение изменений с сервера, добавление изменений,
#                 фиксация изменений, отправка изменений на сервер;
    if [[ ${COMMAND} == "all" ]]
    then
        func_git_tree_pull
        func_git_tree_add
        func_git_tree_commit
        func_git_tree_push
    fi
# readd_pp      - удаление и повторное добавление удаленного
#                 репозитория pp;
    if [[ ${COMMAND} == "readd_pp" ]]
    then
        func_git_tree_readd_pp
    fi
# readd_pz      - удаление и повторное добавление удаленного
#                 репозитория pz;
    if [[ ${COMMAND} == "readd_pz" ]]
    then
        func_git_tree_readd_pz
    fi
# readd_pi      - удаление и повторное добавление удаленного
#                 репозитория pi;
    if [[ ${COMMAND} == "readd_pi" ]]
    then
        func_git_tree_readd_pi
    fi
# readd_or      - удаление и повторное добавление удаленного
#                 репозитория origin;
    if [[ ${COMMAND} == "readd_or" ]]
    then
        func_git_tree_readd_or
    fi
# rm_pp         - удаление удаленного репозитория pp;
    if [[ ${COMMAND} == "rm_pp" ]]
    then
        func_git_rm_pp
    fi
# rm_pz         - удаление удаленного репозитория pz;
    if [[ ${COMMAND} == "rm_pz" ]]
    then
        func_git_rm_pz
    fi
# rm_pi         - удаление удаленного репозитория pi;    
if [[ ${COMMAND} == "rm_pi" ]]
    then
        func_git_rm_pi
    fi    
# rm_or         - удаление удаленного репозитория origin;
    if [[ ${COMMAND} == "rm_or" ]]
    then
        func_git_rm_or
    fi
# clone_pp - клонирование дерева репозиториев в расположение pp;    
    if [[ ${COMMAND} == "clone_pp" ]]
    then
        func_git_clone_pp
    fi
# clone_pz - клонирование дерева репозиториев в расположение pz;    
    if [[ ${COMMAND} == "clone_pz" ]]
    then
        func_git_clone_pz
    fi
# clone_pi - клонирование дерева репозиториев в расположение pi;     
    if [[ ${COMMAND} == "clone_pi" ]]
    then
        func_git_clone_pp
    fi
# clone_or - клонирование дерева репозиториев в расположение origin;    
    if [[ ${COMMAND} == "clone_or" ]]
    then
        func_git_clone_or
    fi
}

func_git_tree_command ()
{
    CDIR=`pwd`
    for i in `find . -name ".git"`
    do
        func_git_tree_echo_long_equal
        cd ${CDIR}/${i}/../
        echo "`pwd`"
        func_git_tree_echo_long
        func_git_tree_command_branch
        func_git_tree_echo_long_plus
    done
    cd ${CDIR}
}

####################################################################################################

func_rs_quicklisp ()
{
#   Выполняет перенос в каталог public файлов, необходимях для
#   обновления quicklisp.
    check_dir_public_html_clp_arch

    cd $HOME/quicklisp/dists
    tar -cvvJf quicklisp.tar.xz ./quicklisp/*.cdb ./quicklisp/*.txt ./quicklisp/archives/
    mv -f quicklisp.tar.xz ${PUB_HTML_CLP_ARH}
}

func_rs_pacman ()
{
    # Выполняет копирование в какалог ${PUB_HTML_CLP_ARH} пакетов и
    # файлов синхронизации, необходимях для обновления msys2.
    
    check_dir_public_html_clp_arch

    if [[ -d "${VAR_CACHE_PACMAN}" ]]
    then
        cd ${VAR_CACHE_PACMAN}
        tar -cvvJf pkg.tar.xz pkg/
        mv -f pkg.tar.xz ${PUB_HTML_CLP_ARH}
    fi

    if [[ -d "${VAR_CACHE_PACMAN}" ]]
    then
        cd ${VAR_LIB_PACMAN}
        tar -cvvJf sync.tar.xz sync/
        mv -f sync.tar.xz ${PUB_HTML_CLP_ARH}
    fi
}

func_rs_dot_emacs_d_public ()
{
    # Выполняет копирование в какалог ${PUB_HTML_CLP_ARH} файлов из
    # каталога .emacs.d.

    check_dir_public_html_clp_arch

    cd ${HOME}
    tar -cvvJf dot.emacs.d.tar.xz .emacs.d/
    mv -f dot.emacs.d.tar.xz ${PUB_HTML_CLP_ARH}
}

func_xz_git ()
{
    # Распаковывает архивы git.tar.xz, содержащие репозитории git, в
    # каталоги с чистыми репозиториями для pp и pz расположений.
    
    check_dir_git_pp
    cd $REPO_GIT_PP_URL
    if [[ `pwd` == "$REPO_GIT_PP_URL" ]]
    then
	rm -rf *.git
    fi
    for i in `ls ${REPO_XZ_PP_URL}/*.git.tar.xz`
    do tar -xvf $i
    done

    check_dir_git_pz
    cd "$REPO_GIT_PZ_URL"
    if [[ `pwd` == "$REPO_GIT_PZ_URL" ]]
    then
	rm -rf *.git
    fi
    for i in `ls ${REPO_XZ_PZ_URL}/*.git.tar.xz`
    do tar -xvf $i
    done
}

func_reclone ()
{
# Для каталога, содержащего git-репозиторий выполняет:
#
# - проверку того, что в git-репозитории существует ссылка на
# удаленный git-репозиторий;
#
# - в случае успеха переходит в вышележащий каталог, удаляет
# git-репозиторий и затем осуществляет попытку его повторного
# клонирования.

### ToDo
### Добавить второй параметр - имя репозитория (вместо pi).
### Добавить проверку, на то что удаленный репозиторий существует.


CDIR=`pwd`

REPO_PI=`git remote | grep pi`

if [[ ${REPO_PI} ==  ${REPO_NAME_PI} ]]
then
    B_NAME=`basename $CDIR`
    echo $B_NAME
    cd ../
    rm -rf $B_NAME
    git clone $REPO_GIT_PI_URL/$B_NAME.git
    cd $B_NAME
    git remote rename origin ${REPO_NAME_PI}
fi
}

####################################################################################################
#### func_git_tree
####################################################################################################

func_git_tree ()
{
    if ! [[ -z "$2" ]]
    then
        BRANCH=$2
        echo ${BRANCH}
    fi

    if [ -z "$1" ]
    then
        func_git_tree_usage_show
    else
        COMMAND=$1
        if [[ ${COMMAND} == "push"          || \
		  ${COMMAND} == "pull"      || \
                  ${COMMAND} == "pullsh"    || \
                  ${COMMAND} == "add"       || \
                  ${COMMAND} == "commit"    || \
                  ${COMMAND} == "all"       || \
                  ${COMMAND} == "readd_pp"  || \
                  ${COMMAND} == "readd_pz"  || \
                  ${COMMAND} == "readd_pi"  || \
                  ${COMMAND} == "readd_or"  || \
                  ${COMMAND} == "rm_pp"     || \
                  ${COMMAND} == "rm_pz"     || \
                  ${COMMAND} == "rm_pi"     || \
                  ${COMMAND} == "rm_or"     || \
                  ${COMMAND} == "clone_pp"  || \
                  ${COMMAND} == "clone_pz"  || \
                  ${COMMAND} == "clone_pi"  || \
                  ${COMMAND} == "clone_or" ]]
	   
        then
            func_git_tree_command
	elif [[ ${COMMAND} == "quicklisp" ]]
	then
	    func_rs_quicklisp
	elif [[ ${COMMAND} == "pacman" ]]
	then
	    func_rs_pacman
	elif [[ ${COMMAND} == "dot_emacs_d" ]]
	then
	    func_rs_dot_emacs_d_public
	elif [[ ${COMMAND} == "remake_git_pp" ]]
	then
	    remake_git_pp
        elif [[ ${COMMAND} == "remake_git_pz" ]]
	then
	    remake_git_pz
	elif [[ ${COMMAND} == "remake_xz_pp" ]]
	then
	    remake_xz_pp
	elif [[ ${COMMAND} == "remake_xz_pz" ]]
	then
	    remake_xz_pz
	elif [[ ${COMMAND} == "remake_xz_pp_tar" ]]
	then
	    remake_xz_pp_tar
	elif [[ ${COMMAND} == "remake_xz_pz_tar" ]]
	then
	    remake_xz_pz_tar
	elif [[ ${COMMAND} == "xz_git" ]]
	then
	    func_xz_git
	elif [[ ${COMMAND} == "rs_local_pi" ]]
	then
	    # Выполняет синхронизацию папки ~/public_html/ с
	    # mnasoft.ddns.mksat.net.
	    rsync -Pavzhe ssh --delete ${HOME}/public_html/ namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html	    
	elif [[ ${COMMAND} == "rs_pi_local" ]]
	then
	    # Синхронизация mnasoft.ddns.mksat.net с папкой ~/public_html.
	    rsync -Pavzhe ssh --delete namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html/ ${HOME}/public_html
	elif [[ ${COMMAND} == "rs_pi_html" ]]
	then
	    # Синхронизация папки ~/public_html/Common-Lisp-Programs/ с сервером mnasoft.ddns.mksat.net
	    rsync -Pavzhe ssh --delete ~/public_html/Common-Lisp-Programs/ namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html/Common-Lisp-Programs/
	elif [[ ${COMMAND} == "reclone" ]]
	then
            func_reclone
        else
            echo "Unknown command: ${COMMAND}"
            func_git_tree_usage_show
        fi
    fi
}

####################################################################################################
#### Main 
####################################################################################################

func_git_tree ${1} ${2} 
