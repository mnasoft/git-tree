#!/bin/bash
# 
REPO_NAME_pp="pp"
REPO_NAME_pz="pz"
REPO_NAME_pi="pi"
REPO_NAME_or="origin"
REPO_NAME_pb="pb"
REPO_NAME_gh="gh"
# 
REPO_GIT_URL_pp="$HOME/git"
REPO_GIT_URL_pz="$HOME/git-big"
REPO_GIT_URL_pi="git@mnasoft.ddns.mksat.net:/opt/git"
REPO_GIT_URL_or="//n000325/home/_namatv/_git"
REPO_GIT_URL_pb="//n133905/home/_namatv/git_pb"
REPO_GIT_URL_gh="git@github.com:mnasoft"
#
REPO_XZ_URL_pp="$HOME/xz"
REPO_XZ_URL_pz="$HOME/xz-big"
# 
REPO_XZ_TAR_pp="xz.tar"
REPO_XZ_TAR_pz="xz-big.tar"
#
PUB_HTML_CLP_ARH="$HOME/public_html/Common-Lisp-Programs/Archive"
#
VAR_CACHE_PACMAN="/var/cache/pacman"
VAR_LIB_PACMAN="/var/lib/pacman"

echo_short ()
{
    # echo '--------------------'
    cd .
}

echo_long ()
{
    # echo '---------------------------------'
    cd .
}

echo_long_plus ()
{
    # echo '+++++++++++++++++++++++++++++++++'
    cd .
}

echo_long_equal ()
{
    echo '================================================================================'
}

check_dir_public_html_clp_arch ()
{
    echo "<<< mkdir -p ${PUB_HTML_CLP_ARH} >>>"
    mkdir -p ${PUB_HTML_CLP_ARH}
}

make_repo_vars ()
{
    REPO_NAME="REPO_NAME_${LOCATION}"
    REPO_GIT_URL="REPO_GIT_URL_${LOCATION}"
    REPO_XZ_URL="REPO_XZ_URL_${LOCATION}"
    REPO_XZ_TAR="REPO_XZ_TAR_${LOCATION}"
}

check_dir_git ()
{
    make_repo_vars
    echo "<<< mkdir -p ${!REPO_GIT_URL} >>>"
    mkdir -p ${!REPO_GIT_URL}
}

check_dir_xz ()
{
    make_repo_vars
    echo "<<< mkdir -p ${!REPO_XZ_URL} >>>"    
    mkdir -p ${!REPO_XZ_URL}
}

rm_git ()
{
    make_repo_vars
    echo "<<< rm -rf ${!REPO_GIT_URL}/*.git >>>"    
    rm -rf ${!REPO_GIT_URL}/*.git
}

remove_xz ()
{
    make_repo_vars 
    echo "<<< rm -f ${!REPO_XZ_URL}/*.git.tar.xz >>>"
    rm -f ${!REPO_XZ_URL}/*.git.tar.xz
}

make_git ()
{
    CDIR=`pwd`
    make_repo_vars
    
    for i in `find . -name "*.git"`
    do
        cd $i/..
        if [[ `git remote | grep ${LOCATION}` ]]
        then
            NAME=`pwd`
            BNAME=`basename $NAME`
            echo $i
            echo $NAME
            echo ${BNAME}
            cd ..
            echo "<<< git clone --bare ${BNAME} ${!REPO_GIT_URL}/${BNAME}.git >>>"
            git clone --bare ${BNAME} ${!REPO_GIT_URL}/${BNAME}.git
        else
            cd ..
        fi
        cd ${CDIR}
    done
}

remake_xz ()
{
    remove_xz
    check_dir_xz
    make_repo_vars
    cd ${!REPO_GIT_URL}
    for i in `find . -name "*.git"`
    do
        BNAME=`basename $i`
        echo $i
        echo ${BNAME}
        echo "<<< tar -cvvJf ${BNAME}.tar.xz ${BNAME}/ >>>"
        tar -cvvJf ${BNAME}.tar.xz ${BNAME}/
        echo "<<< mv ${BNAME}.tar.xz ${!REPO_XZ_URL}/ >>>"
        mv ${BNAME}.tar.xz ${!REPO_XZ_URL}/
    done
}

remake_git ()
{
    rm_git

    echo "<<< cd ${HOME}/quicklisp/local-projects/ >>>"
    cd ${HOME}/quicklisp/local-projects/
    make_git

    echo "<<< cd ${HOME}/develop/ >>>"
    cd ${HOME}/develop/
    make_git

    echo "<<< cd ${HOME}/elisp/ >>>"
    cd ${HOME}/elisp/
    make_git
}

remake_tar_xz ()
{
    check_dir_public_html_clp_arch
    remake_xz
    make_repo_vars

    echo "<<< cd ${!REPO_XZ_URL} >>>"
    cd ${!REPO_XZ_URL}

    echo "<<< tar -cvvf ${!REPO_XZ_TAR} *.git.tar.xz >>>"
    tar -cvvf ${!REPO_XZ_TAR} *.git.tar.xz
    
    echo "<<< mv -f ${!REPO_XZ_TAR} ${PUB_HTML_CLP_ARH} >>>"
    mv -f ${!REPO_XZ_TAR} ${PUB_HTML_CLP_ARH}
}

GIT_TREE_USAGE="
NAME
        $(basename $0) выполняет однотипные операции над репозиториями
                 git, расположенными в дереве каталогов.

SYNOPSIS
        $(basename $0) [ pull | push | pullsh | all [<branch>]]   |
                 [ commit | add]                            |
                 [ readd         [ pp | pz | pi | or | pb]] |
                 [ rm            [ pp | pz | pi | or | pb]] |
                 [ clone         [ pp | pz | pi | or | pb]] |
                 [ make_git      [ pp | pz ]]               |
                 [ xz_git        [ pp | pz ]]               |
                 [ remake_git    [ pp | pz ]]               |
                 [ remake_tar_xz [ pp | pz ]]    

        $(basename $0) [quicklisp] | [pacman] | [dot_emacs_d] | [add_aliases] |
                 [rs_local_pi | rs_pi_local | rs_pi_html] |
                 [reclone]

DESCRIPTION
    Форма 1:
        Выполняет поиск репозиториев git, начиная с текущего
        каталога. Для каждого найденного репозитория git выполняет
        соответствующую команду.
    Форма 2:
        Выполняет сооветствующую команду.

OPTIONS 
        <branch> задает ветку, получаемую|отправляемую на удаленные
            сервера. Если не указана операция выполняется с текущей
            веткой.

COMMANDS
        pull      - получение изменений с сервера;
        push      - отправка изменений на сервер;
        pullsh    - получение и отправка изменений;
        add       - добавление изменений;
        commit    - фиксация изменений;
        all       - получение изменений с сервера, добавление изменений,
                    фиксация изменений, отправка изменений на сервер;

    Удаление и повторное добавление удаленного репозитория:
        readd     - в размещение [ pp | pz | pi | or | pb ];

    Удаление удаленного репозитория:
        rm        -  в размещение [ pp | pz | pi | or | pb ];

    Клонирование дерева репозиториев:
        clone     - в размещение [ pp | pz | pi | or | pb ];

    Создание чистых репозиториев git:
        make_git :
            $REPO_GIT_URL_pp для расположения pp;
            $REPO_GIT_URL_pz для расположения pz;

        remake_git - удаляет и создает повтроно для: расположения pp в
            каталоге $REPO_GIT_URL_pp; расположения pz в каталоге
            $REPO_GIT_URL_pz чистые репозитории git, находящиеся в
            каталогах:
            - ${HOME}/quicklisp/local-projects/;
            - ${HOME}/develop/;
            - ${HOME}/elisp/;

        remake_xz - удаляет и повторно создает:
            - для расположения pp в каталоге
            $REPO_XZ_URL_pp
            - для расположения pz в каталоге
            $REPO_XZ_URL_pz 
            архивы .tar.xz репозиториев git, находящихся в каталоге 
            $REPO_GIT_URL_pp;
            $REPO_GIT_URL_pz
            соответственно;

        remake_tar_xz :
            - для расположения pp создает архив ${REPO_XZ_TAR_pp} из
              файлов с расширением .git.tar.xz, находящихся в каталоге
              ${REPO_XZ_URL_pp};
            - для расположения pz создает архив ${REPO_XZ_TAR_pz} из
              файлов с расширением .git.tar.xz, находящихся в каталоге
              ${REPO_XZ_URL_pz}, и перемещает его в каталог
              ${PUB_HTML_CLP_ARH};

        rs_local_pi : Выполняет синхронизацию папки ~/public_html/ с
	     mnasoft.ddns.mksat.net;

        rs_pi_local : Синхронизация mnasoft.ddns.mksat.net с папкой
             ~/public_html;

        rs_pi_html : Синхронизация папки
             ~/public_html/Common-Lisp-Programs/ с сервером
             mnasoft.ddns.mksat.net;

    Распаковка архивов git.tar.xz в каталоги с чистыми репозиториями
    для расположения:
        xz_git - pp и pp;
    
        quicklisp - создает в каталоге ${PUB_HTML_CLP_ARH} файл quicklisp.tar.xz,
            содержащий данные для обновления quicklisp;
    
        pacman - копирует в какалог ${PUB_HTML_CLP_ARH} пакетов и файлов
            синхронизации, необходимях для обновления msys2;
    
        dot_emacs_d - копирует в какалог ${PUB_HTML_CLP_ARH} файлов из
             каталога .emacs.d;
    
        add_aliases - добавляет аббревиатуры для запуска команд git.
"

show_usage ()
{
    echo "${GIT_TREE_USAGE}"
}

push ()
{
    for rpo in `git remote`
    do
        echo_short

        echo "<<< git push ${rpo} ${DO_BRANCH} >>>"
        git push ${rpo} ${DO_BRANCH}
        
        echo_short
    done
}

pull ()
{
    for rpo in `git remote`
    do
        echo_short
        
        echo "<<< git pull ${rpo} ${DO_BRANCH} >>>"
        git pull ${rpo} ${DO_BRANCH}
        
        echo_short
    done
}

add ()
{
    echo_short

    echo "<<< git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd" -o -name "*.c*" -o -name "*.h*"` >>>"
    git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd" -o -name "*.c*" -o -name "*.h*"`
# -o -name "*.scr" 
    
    echo_short
}

readd ()
{
    echo_short
    make_repo_vars
    
    echo "<<< git remote remove ${!REPO_NAME} >>>"
    git remote remove ${!REPO_NAME}
    
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    
    echo "<<< git remote add ${!REPO_NAME} ${!REPO_GIT_URL}/${REPO}.git >>>"
    git remote add ${!REPO_NAME} ${!REPO_GIT_URL}/${REPO}.git

    echo_short
}

git_rm ()
{
    echo_short
    make_repo_vars

    echo "<<< git remote remove ${!REPO_NAME} >>>"
    git remote remove ${!REPO_NAME}
    echo_short
}

git_clone ()
{
    if [[ `git remote | grep ${LOCATION}` ]]
    then
        make_repo_vars
        
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo "<<< git clone --bare . ${!REPO_GIT_URL}/${BNAME}.git >>>"
        git           clone --bare . ${!REPO_GIT_URL}/${BNAME}.git
    fi
    echo_short
}

commit ()
{
    echo_short
    echo "<<< git commit -a -m \"`date -u`\" >>>"
    git commit -a -m "`date -u`"
    echo_short
}

push_or_pull ()
{
    for rpo in `git remote`
    do
        echo_short

        echo "<<< git ${COMMAND} ${rpo} ${DO_BRANCH} >>>"
        git ${COMMAND} ${rpo} ${DO_BRANCH}

        echo_short
    done
}

current_branch ()
{
    CURRENT_BRANCH=`git branch --no-color | grep \*  | cut -d ' ' -f 2`
}

command_branch ()
{
    current_branch
    DO_BRANCH="${CURRENT_BRANCH}"
#    if ! [[ -z "${BRANCH}" ]]
#    then
#        DO_BRANCH="${BRANCH}"
#    else
#        DO_BRANCH="${CURRENT_BRANCH}"
#    fi
    if [[ ${COMMAND} == "push" || ${COMMAND} == "pull" ]]
    then
        push_or_pull
    fi
    if [[ ${COMMAND} == "pullsh" ]]
    then
        pull
        push
    fi
    if [[ ${COMMAND} == "add" ]]
    then
        add
    fi
    if [[ ${COMMAND} == "commit" ]]
    then
        commit
    fi
    if [[ ${COMMAND} == "all" ]]
    then
        pull
        add
        commit
        push
    fi
    if [[ ${COMMAND} == "readd" ]]
    then
        readd
    fi
    if [[ ${COMMAND} == "rm" ]]
    then
        git_rm
    fi
    if [[ ${COMMAND} == "clone" ]]
    then
        git_clone
    fi    
}

command ()
{
    CDIR=`pwd`
    for i in `find . -name ".git"`
    do
        echo_long_equal
        cd ${CDIR}/${i}/../
        echo "`pwd`"
        echo_long
        command_branch
        echo_long_plus
    done
    cd ${CDIR}
}

rs_quicklisp ()
{
    check_dir_public_html_clp_arch

    cd $HOME/quicklisp/dists
    tar -cvvJf quicklisp.tar.xz ./quicklisp/*.cdb ./quicklisp/*.txt ./quicklisp/archives/
    mv -f quicklisp.tar.xz ${PUB_HTML_CLP_ARH}
}

rs_pacman ()
{
    check_dir_public_html_clp_arch

    if [[ -d "${VAR_CACHE_PACMAN}" ]]
    then
        cd ${VAR_CACHE_PACMAN}
        tar -cvvJf pkg.tar.xz pkg/
        mv -f pkg.tar.xz ${PUB_HTML_CLP_ARH}
    fi

    if [[ -d "${VAR_CACHE_PACMAN}" ]]
    then
        cd ${VAR_LIB_PACMAN}
        tar -cvvJf sync.tar.xz sync/
        mv -f sync.tar.xz ${PUB_HTML_CLP_ARH}
    fi
}

rs_dot_emacs_d_public ()
{
    check_dir_public_html_clp_arch

    echo "<<< cd ${HOME} >>>"
    cd ${HOME}

    echo "<<< tar -cvvJf dot.emacs.d.tar.xz .emacs.d/ >>>"
    tar -cvvJf dot.emacs.d.tar.xz .emacs.d/

    echo "<<< mv -f dot.emacs.d.tar.xz ${PUB_HTML_CLP_ARH} >>>"
    mv -f dot.emacs.d.tar.xz ${PUB_HTML_CLP_ARH}
}

cd_git_url ()
{
    make_repo_vars
    echo "<<< cd ${!REPO_GIT_URL} >>>"
    cd ${!REPO_GIT_URL}
}

rm_rf_git ()
{
    echo "<<< rm -rf *.git >>>"
    rm -rf *.git
}

xz_git ()
{
    check_dir_git
    cd_git_url
    make_repo_vars
    
    if [[ `pwd` == "${!REPO_GIT_URL}" ]]
    then rm_rf_git
    fi
    for i in `ls ${!REPO_XZ_URL}/*.git.tar.xz`
    do tar -xvf $i
    done
}

reclone ()
{
# Для каталога, содержащего git-репозиторий выполняет:
#
# - проверку того, что в git-репозитории существует ссылка на
# удаленный git-репозиторий;
#
# - в случае успеха переходит в вышележащий каталог, удаляет
# git-репозиторий и затем осуществляет попытку его повторного
# клонирования.

### ToDo
### Добавить второй параметр - имя репозитория (вместо pi).
### Добавить проверку, на то что удаленный репозиторий существует.
### !!!!!!!!!!

CDIR=`pwd`

REPO_PI=`git remote | grep pi`

if [[ ${REPO_PI} ==  ${REPO_NAME_pi} ]]
then
    BNAME=`basename ${CDIR}`
    echo ${BNAME}
    cd ../
    rm -rf ${BNAME}
    git clone $REPO_GIT_URL_pi/${BNAME}.git
    cd ${BNAME}
    git remote rename origin ${REPO_NAME_pi}
fi
}

add_aliases ()
{
    git config --global alias.lg 'log --oneline --graph'
    git config --global alias.co checkout
    git config --global alias.br branch
    git config --global alias.ci commit
    git config --global alias.st status
    git config --global alias.visual '!gitk'
    git config --global alias.tree '!git-tree'
    git config --global core.editor emacs
}

usage_location ()
{
    show_usage
    echo "Расположение должно быть одним из следующего: [ pp | pz | pi | or | pb | gh ]"
}

fgt ()
{
# Проверка переметров начало
    if [ -z "$1" ]
    then
        show_usage
        exit 1
    else
        COMMAND=$1
        if [[ ${COMMAND} == "readd"     || \
                ${COMMAND} == "rm"    || \
                ${COMMAND} == "clone" ]]
        then
            if ! [[ -z "$2" ]]
            then
                LOCATION=$2
                if ! [[ ${LOCATION} == "pp" || \
                            ${LOCATION} == "pz" || \
                            ${LOCATION} == "pi" || \
                            ${LOCATION} == "or" || \
                            ${LOCATION} == "pb" || \
                            ${LOCATION} == "gh" ]]
                then
                    usage_location
                    exit 1
                fi
            fi 
        fi
    fi
# Проверка переметров конец
    if [[ ${COMMAND} == "push"       || \
              ${COMMAND} == "pull"   || \
              ${COMMAND} == "pullsh" || \
              ${COMMAND} == "add"    || \
              ${COMMAND} == "commit" || \
              ${COMMAND} == "all"    || \
              ${COMMAND} == "readd"  || \
              ${COMMAND} == "rm"     || \
              ${COMMAND} == "clone" ]]
    then
        command
    elif [[ ${COMMAND} == "remake_xz" ]]
    then
        remake_xz
    elif [[ ${COMMAND} == "remake_tar_xz" ]]
    then
        remake_tar_xz
    elif [[ ${COMMAND} == "xz_git" ]]
    then
        xz_git
    elif [[ ${COMMAND} == "remake_git" ]]
    then
        remake_git
    elif [[ ${COMMAND} == "make_git" ]]
    then
        make_git
    elif [[ ${COMMAND} == "quicklisp" ]]
    then
        rs_quicklisp
    elif [[ ${COMMAND} == "pacman" ]]
    then
        rs_pacman
    elif [[ ${COMMAND} == "dot_emacs_d" ]]
    then
        rs_dot_emacs_d_public
    elif [[ ${COMMAND} == "rs_local_pi" ]]
    then
        rsync -Pavzhe ssh --delete ${HOME}/public_html/ namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html
    elif [[ ${COMMAND} == "rs_pi_local" ]]
    then
        rsync -Pavzhe ssh --delete namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html/ ${HOME}/public_html
    elif [[ ${COMMAND} == "rs_pi_html" ]]
    then
        rsync -Pavzhe ssh --delete ~/public_html/Common-Lisp-Programs/ namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html/Common-Lisp-Programs/
    elif [[ ${COMMAND} == "reclone" ]]
    then
        reclone
    elif [[ ${COMMAND} == "add_aliases" ]]
    then
        add_aliases
    else
        echo "Unknown command: ${COMMAND}"
        show_usage
    fi
}

fgt "$@"
