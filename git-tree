#!/bin/bash

USAGE="
Usage: $(basename $0) COMMAND [BRANCH]

Command: 
        pull          - получение изменений с сервера;
        push          - отправка изменений на сервер;
        pullsh        - получение и отправка изменений;
        add           - добавление изменений;
        commit        - фиксация изменений;
        all           - получение изменений с сервера, добавление изменений,
                        фиксация изменений, отправка изменений на сервер;
        readd_pp      - удаление и повторное добавление удаленного
                        репозитория pp;
        readd_pi      - удаление и повторное добавление удаленного
                        репозитория pi;
        readd_origin  - удаление и повторное добавление удаленного
                        репозитория origin;
        rm_origin     - удаление удаленного репозитория origin.

Описание:

         Выполняет поиск репозиториев git, начиная с текущего
         каталога. Для каздого из, найденных репозиториев выполняет
         команду COMMAND для всех удаленных репозиториев.

         Необязательный параметр BRANCH задает ветку,
         получаемую|отправляемую на удаленные сервера. Если он не
         задан синхронизируется текущая ветка.
"

func_usage_show ()
{
    echo "${USAGE}"
}

func_git_push ()
{
    for rpo in `git remote`
    do
        echo "--------------------"
        echo ">>> git push ${rpo} ${DO_BRANCH} <<<"
        git push ${rpo} ${DO_BRANCH}
        echo "--------------------"
    done
}

func_git_pull ()
{
    for rpo in `git remote`
    do
        echo "--------------------"
        echo ">>> git pull ${rpo} ${DO_BRANCH} <<<"
        git pull ${rpo} ${DO_BRANCH}
        echo "--------------------"
    done
}

func_git_add ()
{
    echo '--------------------'
    echo '>>> git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd"` <<<'
    git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd"`
# -o -name "*.scr" 
    
    echo '--------------------'
}

REPO_NAME_PP="pp"
REPO_NAME_PZ="pz"
REPO_NAME_PI="pi"
REPO_NAME_ORIGIN="origin"

REPO_URL_PP="/home/namatv/git"
REPO_URL_PZ="/home/namatv/git-big"
REPO_URL_PI="git@mnasoft.ddns.mksat.net:/opt/git"
REPO_URL_ORIGIN="//n000325/home/_namatv/_git"

func_git_readd_pp ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PP} <<<"
    git remote remove ${REPO_NAME_PP}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PP} ${REPO_URL_PP}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PP} ${REPO_URL_PP}/${REPO}.git
    echo '--------------------'
}

func_git_readd_pz ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PZ} <<<"
    git remote remove ${REPO_NAME_PZ}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PZ} ${REPO_URL_PZ}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PZ} ${REPO_URL_PZ}/${REPO}.git
    echo '--------------------'
}

func_git_readd_pi ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_PI} <<<"
    git remote remove ${REPO_NAME_PI}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_PI} ${REPO_URL_PI}/${REPO}.git <<<"
    git remote add ${REPO_NAME_PI} ${REPO_URL_PI}/${REPO}.git
    echo '--------------------'
}

func_git_readd_origin ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_ORIGIN} <<<"
    git remote remove ${REPO_NAME_ORIGIN}
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    echo ">>> git remote add ${REPO_NAME_ORIGIN} ${REPO_URL_ORIGIN}/${REPO}.git <<<"
    git remote add ${REPO_NAME_ORIGIN} ${REPO_URL_ORIGIN}/${REPO}.git
    echo '--------------------'
}

func_git_rm_origin ()
{
    echo '--------------------'
    echo ">>> git remote remove ${REPO_NAME_ORIGIN} <<<"
    git remote remove ${REPO_NAME_ORIGIN}
    echo '--------------------'
}

func_git_commit ()
{
    echo '--------------------'
    echo '>>> git commit -a -m "`date -u`" <<<'
    git commit -a -m "`date -u`"
    echo '--------------------'
}

func_git_push_or_pull ()
{
    for rpo in `git remote`
    do
    echo '--------------------'
    echo ">>> git ${COMMAND} ${rpo} ${DO_BRANCH} <<<"
    git ${COMMAND} ${rpo} ${DO_BRANCH}
    echo '--------------------'
    done
}

func_git_command_branch ()
{
    CURRENT_BRANCH=`git branch --no-color | grep \*  | cut -d ' ' -f 2`
    if ! [[ -z "${BRANCH}" ]]
    then
        DO_BRANCH="${BRANCH}"
    else
        DO_BRANCH="${CURRENT_BRANCH}"
    fi
    
    if [[ ${COMMAND} == "push" || ${COMMAND} == "pull" ]]
    then
        func_git_push_or_pull
    fi
    
    if [[ ${COMMAND} == "pullsh" ]]
    then
        func_git_pull
        func_git_push
    fi
    
    if [[ ${COMMAND} == "add" ]]
    then
        func_git_add
    fi
    
    if [[ ${COMMAND} == "commit" ]]
    then
        func_git_commit
    fi
    
    if [[ ${COMMAND} == "all" ]]
    then
        func_git_pull
        func_git_add
        func_git_commit
        func_git_push
    fi

    if [[ ${COMMAND} == "readd_pp" ]]
    then
        func_git_readd_pp
    fi

    if [[ ${COMMAND} == "readd_pz" ]]
    then
        func_git_readd_pz
    fi

    if [[ ${COMMAND} == "readd_pi" ]]
    then
        func_git_readd_pi
    fi

    if [[ ${COMMAND} == "readd_origin" ]]
    then
        func_git_readd_origin
    fi
    if [[ ${COMMAND} == "rm_origin" ]]
    then
        func_git_rm_origin
    fi
}

func_git_command ()
{
    CDIR=`pwd`
    for i in `find . -name ".git"`
    do
        echo "================================="
        cd ${CDIR}/${i}/../
        echo "`pwd`"
        echo "---------------------------------"
        func_git_command_branch
        echo "+++++++++++++++++++++++++++++++++"
    done
    cd ${CDIR}
}

if ! [[ -z "$2" ]]
then
    BRANCH=$2
    echo ${BRANCH}
fi

if [ -z "$1" ]
then
    func_usage_show
else
    COMMAND=$1
    if [[ ${COMMAND} == "push"         || \
          ${COMMAND} == "pull"         || \
          ${COMMAND} == "pullsh"       || \
          ${COMMAND} == "add"          || \
          ${COMMAND} == "commit"       || \
          ${COMMAND} == "all"          || \
          ${COMMAND} == "readd_pp"     || \
          ${COMMAND} == "readd_pz"     || \
          ${COMMAND} == "readd_pi"     || \
          ${COMMAND} == "readd_origin" || \
          ${COMMAND} == "rm_origin" ]]
    then
        func_git_command
    else
        echo "Unknown command: ${COMMAND}"
        func_usage_show
    fi
fi
