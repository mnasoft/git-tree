#!/bin/bash
# 
REPO_NAME_pp="pp"
REPO_NAME_pz="pz"
REPO_NAME_pi="pi"
REPO_NAME_or="origin"
REPO_NAME_pb="pb"
# 
REPO_GIT_URL_pp="$HOME/git"
REPO_GIT_URL_pz="$HOME/git-big"
REPO_GIT_URL_pi="git@mnasoft.ddns.mksat.net:/opt/git"
REPO_GIT_URL_or="//n000325/home/_namatv/_git"
REPO_GIT_URL_pb="//n133905/home/_namatv/git_pb"
# 
REPO_XZ_URL_pp="$HOME/xz"
REPO_XZ_URL_pz="$HOME/xz-big"
# 
REPO_XZ_PP_TAR="xz.tar"
REPO_XZ_PZ_TAR="xz-big.tar"
#
PUB_HTML_CLP_ARH="$HOME/public_html/Common-Lisp-Programs/Archive"
#
VAR_CACHE_PACMAN="/var/cache/pacman"
VAR_LIB_PACMAN="/var/lib/pacman"

echo_short ()
{
    # echo '--------------------'
    cd .
}

echo_long ()
{
    # echo '---------------------------------'
    cd .
}

echo_long_plus ()
{
    # echo '+++++++++++++++++++++++++++++++++'
    cd .
}

echo_long_equal ()
{
    echo '================================================================================'
}
####################################################################################################
#### check_dir
####################################################################################################

check_dir_public_html_clp_arch ()
{
    echo "<<< mkdir -p ${PUB_HTML_CLP_ARH} >>>"
    mkdir -p ${PUB_HTML_CLP_ARH}
}

check_dir_git_pp ()
{
    echo "<<< mkdir -p ${REPO_GIT_URL_pp} >>>"
    mkdir -p ${REPO_GIT_URL_pp}
}

check_dir_git_pz ()
{
    echo "<<< mkdir -p ${REPO_GIT_URL_pz} >>>"
    mkdir -p ${REPO_GIT_URL_pz}
}

check_dir_xz_pp ()
{
    echo "<<< mkdir -p ${REPO_XZ_URL_pp} >>>"    
    mkdir -p ${REPO_XZ_URL_pp}
}

check_dir_xz_pz ()
{
    echo "<<< mkdir -p ${REPO_XZ_URL_pz} >>>"
    mkdir -p ${REPO_XZ_URL_pz}
}

####################################################################################################
#### remove_git
####################################################################################################

rm_git_pp ()
{
    echo "<<< rm -rf $REPO_GIT_URL_pp/*.git >>>"    
    rm -rf $REPO_GIT_URL_pp/*.git
}

rm_git_pz ()
{
    echo "<<< rm -rf $REPO_GIT_URL_pz/*.git >>>"
    rm -rf $REPO_GIT_URL_pz/*.git
}

remove_xz_pp ()
{
    echo "<<< rm -f $REPO_XZ_URL_pp/*.git.tar.xz >>>"
    rm -f $REPO_XZ_URL_pp/*.git.tar.xz
}

remove_xz_pz ()
{
    echo "<<< rm -f $REPO_XZ_URL_pz/*.git.tar.xz >>>"
    rm -f $REPO_XZ_URL_pz/*.git.tar.xz
}

####################################################################################################
#### make_git 
####################################################################################################

make_git_pp ()
{
    CDIR=`pwd`
    for i in `find . -name "*.git"`
    do
        cd $i/..
        if [[ `git remote | grep pp` ]]
        then
            NAME=`pwd`
            BNAME=`basename $NAME`
            echo $i
            echo $NAME
            echo $BNAME
            cd ..
            echo "<<< git clone --bare $BNAME $REPO_GIT_URL_pp/$BNAME.git >>>"
            git clone --bare $BNAME $REPO_GIT_URL_pp/$BNAME.git
        else
            cd ..
        fi
        cd $CDIR
    done
}

make_git_pz ()
{
    CDIR=`pwd`
    for i in `find . -name "*.git"`
    do
        cd $i/..
        if [[ `git remote | grep pz` ]]
        then
            NAME=`pwd`
            BNAME=`basename $NAME`
            echo $i
            echo $NAME
            echo $BNAME
            cd ..
            echo "<<< git clone --bare $BNAME $REPO_GIT_URL_pz/$BNAME.git >>>"
            git clone --bare $BNAME $REPO_GIT_URL_pz/$BNAME.git
        else
            cd ..
        fi
        cd $CDIR
    done
}

####################################################################################################
#### remake-xz 
####################################################################################################

remake_xz_pp ()
{
    remove_xz_pp
    check_dir_xz_pp
    cd $REPO_GIT_URL_pp
    for i in `find . -name "*.git"`
    do
        BNAME=`basename $i`
        echo $i
        echo $BNAME
        echo "<<< tar -cvvJf $BNAME.tar.xz $BNAME/ >>>"
        tar -cvvJf $BNAME.tar.xz $BNAME/
        echo "<<< mv $BNAME.tar.xz $REPO_XZ_URL_pp/ >>>"
        mv $BNAME.tar.xz $REPO_XZ_URL_pp/
    done
}

remake_xz_pz ()
{
    remove_xz_pz   
    check_dir_xz_pz
    cd $REPO_GIT_URL_pz
    for i in `find . -name "*.git"`
    do
        BNAME=`basename $i`
        echo $i
        echo $BNAME
        echo "<<< tar -cvvJf $BNAME.tar.xz $BNAME/ >>>"
        tar -cvvJf $BNAME.tar.xz $BNAME/
        echo "<<< mv $BNAME.tar.xz $REPO_XZ_URL_pz/ >>>"
        mv $BNAME.tar.xz $REPO_XZ_URL_pz/
    done
}

####################################################################################################
####
####################################################################################################

remake_git_pp ()
{
    # Выполняет пересоздание каталога ~/git, наполняя его чистыми
    # репозиториями. Поиск репозиротиев ведется в каталогах:
    # ~/quicklisp/local-projects/; ~/develop/; ~/elisp/.

    rm_git_pp

    echo "<<< cd ${HOME}/quicklisp/local-projects/ >>>"
    cd ${HOME}/quicklisp/local-projects/
    make_git_pp

    echo "<<< cd ${HOME}/develop/ >>>"
    cd ${HOME}/develop/
    make_git_pp

    echo "<<< cd ${HOME}/elisp/ >>>"
    cd ${HOME}/elisp/
    make_git_pp
}

remake_git_pz ()
{
    # Выполняет пересоздание каталога ~/git, наполняя его чистыми
    # репозиториями. Поиск репозиротиев ведется в каталогах:
    # ~/quicklisp/local-projects/; ~/develop/; ~/elisp/.

    rm_git_pz

    echo "<<< cd ${HOME}/quicklisp/local-projects/ >>>"
    cd ${HOME}/quicklisp/local-projects/
    
    make_git_pz

    echo "<<< cd ${HOME}/develop/ >>>"
    cd ${HOME}/develop/
    
    make_git_pz

    echo "<<< cd ${HOME}/elisp/ >>>"
    cd ${HOME}/elisp/
    make_git_pz
}

####################################################################################################
# remake_xz_pp_tar
####################################################################################################

remake_xz_pp_tar ()
{
    # Выполняет перенос в каталог ${PUB_HTML_CLP_ARH}/ архивов
    # git.tar.xz
    
    check_dir_public_html_clp_arch
    remake_xz_pp

    echo "<<< cd ${REPO_XZ_URL_pp} >>>"
    cd ${REPO_XZ_URL_pp}
    
    echo "<<< tar -cvvf ${REPO_XZ_PP_TAR} *.git.tar.xz >>>"
    tar -cvvf ${REPO_XZ_PP_TAR} *.git.tar.xz
    
    echo "<<< mv -f ${REPO_XZ_PP_TAR} ${PUB_HTML_CLP_ARH} >>>"
    mv -f ${REPO_XZ_PP_TAR} ${PUB_HTML_CLP_ARH}
}

remake_xz_pz_tar ()
{
    # Выполняет перенос в каталог ${PUB_HTML_CLP_ARH}/ архивов
    # git.tar.xz
    
    check_dir_public_html_clp_arch
    remake_xz_pz

    echo "<<< cd ${REPO_XZ_URL_pz} >>>"
    cd ${REPO_XZ_URL_pz}
    
    echo "<<< tar -cvvf ${REPO_XZ_PZ_TAR} *.git.tar.xz >>>"
    tar -cvvf ${REPO_XZ_PZ_TAR} *.git.tar.xz
    
    echo "<<< mv -f ${REPO_XZ_PZ_TAR} ${PUB_HTML_CLP_ARH} >>>"
    mv -f ${REPO_XZ_PZ_TAR} ${PUB_HTML_CLP_ARH}
}

####################################################################################################
#### git_tree
####################################################################################################

GIT_TREE_USAGE="
NAME

        $(basename $0) выполняет однотипные операции над репозиториями
            git, расположенными в дереве каталогов.

SYNOPSIS
        $(basename $0) [ pull | push | pullsh | all [<branch>]] 
                       | [commit | add]
                       | [readd [pp | pz | pi | or | pb]]
                       | [rm [pp | pz | pi | or | pb]]
                       | [clone [pp | pz | pi | or | pb]]
                       | [make_git_pp | make_git_pz] 

        $(basename $0) [remake_git_pp | remake_git_pz] 
                       | [remake_xz_pp_tar | remake_xz_pz_tar] 
                       | [quicklisp] | [pacman] | [dot_emacs_d] | [add_aliases]
                       | [xz_git | xz_pp_git | xz_pz_git]
                       | [rs_local_pi | rs_pi_local | rs_pi_html]
                       | [reclone]

DESCRIPTION
    Форма 1:
        Выполняет поиск репозиториев git, начиная с текущего
        каталога. Для каждого найденного репозитория git выполняет
        соответствующую команду.
    Форма 2:
        Выполняет сооветствующую команду.

OPTIONS 
        <branch> задает ветку, получаемую|отправляемую на удаленные
            сервера. Если не указана операция выполняется с текущей
            веткой.

COMMANDS
        pull      - получение изменений с сервера;
        push      - отправка изменений на сервер;
        pullsh    - получение и отправка изменений;
        add       - добавление изменений;
        commit    - фиксация изменений;
        all       - получение изменений с сервера, добавление изменений,
                    фиксация изменений, отправка изменений на сервер;

    Удаление и повторное добавление удаленного репозитория:
        readd         - [ pp | pz | pi | or | pb ];

    Удаление удаленного репозитория:
        rm            -  [ pp | pz | pi | or | pb ];

    Клонирование дерева репозиториев:
        clone         - в размещение [ pp | pz | pi | or | pb ];

    Создание чистых репозиториев git:
        make_git_pp - $REPO_GIT_URL_pp для удаленного репозитория pp;
        make_git_pz - $REPO_GIT_URL_pz для удаленного репозитория pz;

        remake_git_pp - удаляет и создает повтроно в каталоге
            $REPO_GIT_URL_pp чистые репозитории git, находящиеся в
            каталогах:
            - ${HOME}/quicklisp/local-projects/;
            - ${HOME}/develop/;
            - ${HOME}/elisp/;

        remake_git_pz - удаляет и создает повтроно в каталоге
            $REPO_GIT_URL_pz чистые репозитории git, 
            находящиеся в каталогах:
            - ${HOME}/quicklisp/local-projects/;
            - ${HOME}/develop/;
            - ${HOME}/elisp/;

        remake_xz_pp - удаляет и повторно создает в каталоге
            $REPO_XZ_URL_pp 
            архивы .tar.xz репозиториев git, находящихся в каталоге 
            $REPO_GIT_URL_pp;
    
        remake_xz_pz - удаляет и повторно создает в каталоге
            $REPO_XZ_URL_pz 
            архивы .tar.xz репозиториев git, находящихся в каталоге 
            $REPO_GIT_URL_pz;
    
        remake_xz_pp_tar - создает архив ${REPO_XZ_PP_TAR} из файлов 
            с расширением .git.tar.xz, находящихся в каталоге 
            ${REPO_XZ_URL_pp}, и перемещает его в каталог 
            ${PUB_HTML_CLP_ARH};
    
        remake_xz_pz_tar - создает архив ${REPO_XZ_PZ_TAR} из файлов 
            с расширением .git.tar.xz, находящихся в каталоге 
            ${REPO_XZ_URL_pz}, и перемещает его в каталог 
            ${PUB_HTML_CLP_ARH};


    Распаковка архивов git.tar.xz в каталоги с чистыми репозиториями
    для расположения:
        xz_pp_git - pp;
        xz_pz_git - pz;
        xz_git - pp и pp;
    
        quicklisp - создает в каталоге ${PUB_HTML_CLP_ARH} файл quicklisp.tar.xz,
            содержащий данные для обновления quicklisp;
    
        pacman - копирует в какалог ${PUB_HTML_CLP_ARH} пакетов и файлов
            синхронизации, необходимях для обновления msys2;
    
        dot_emacs_d - копирует в какалог ${PUB_HTML_CLP_ARH} файлов из
             каталога .emacs.d;
    
        add_aliases - добавляет аббревиатуры для запуска команд git.
"

func_git_tree_usage_show ()
{
    echo "${GIT_TREE_USAGE}"
}

func_git_tree_push ()
{
    for rpo in `git remote`
    do
        echo_short

        echo "<<< git push ${rpo} ${DO_BRANCH} >>>"
        git push ${rpo} ${DO_BRANCH}
        
        echo_short
    done
}

func_git_tree_pull ()
{
    for rpo in `git remote`
    do
        echo_short
        
        echo "<<< git pull ${rpo} ${DO_BRANCH} >>>"
        git pull ${rpo} ${DO_BRANCH}
        
        echo_short
    done
}

func_git_tree_add ()
{
    echo_short

    echo "<<< git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd" -o -name "*.c*" -o -name "*.h*"` >>>"
    git add `find . -name "*.lisp" -o -name "*.org" -o -name "*.asd" -o -name "*.c*" -o -name "*.h*"`
# -o -name "*.scr" 
    
    echo_short
}

func_git_tree_readd ()
{
    echo_short
    REPO_NAME="REPO_NAME_${BRANCH}"
    REPO_GIT_URL="REPO_GIT_URL_${BRANCH}"
    
    echo "<<< git remote remove ${!REPO_NAME} >>>"
    git remote remove ${!REPO_NAME}
    
    DIR_REPO=`pwd`
    REPO=`basename ${DIR_REPO}`
    
    echo "<<< git remote add ${!REPO_NAME} ${!REPO_GIT_URL}/${REPO}.git >>>"
    git remote add ${!REPO_NAME} ${!REPO_GIT_URL}/${REPO}.git
    
    echo_short
}

func_git_rm ()
{
    echo_short
    REPO_NAME="REPO_NAME_${BRANCH}"
    echo "<<< git remote remove ${!REPO_NAME} >>>"
    git remote remove ${!REPO_NAME}
    echo_short
}

func_git_clone ()
{
    if [[ `git remote | grep ${BRANCH}` ]]
    then
        REPO_NAME="REPO_NAME_${BRANCH}"
        REPO_GIT_URL="REPO_GIT_URL_${BRANCH}"
        
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo "<<< git clone --bare . ${!REPO_GIT_URL}/${BNAME}.git >>>"
        git           clone --bare . ${!REPO_GIT_URL}/${BNAME}.git
    fi
    echo_short
}

func_git_clone_pp ()
{
    if [[ `git remote | grep pp` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo "<<< git clone --bare . ${REPO_GIT_URL_pp}/${BNAME}.git >>>"
        git           clone --bare . ${REPO_GIT_URL_pp}/${BNAME}.git
    fi
    echo_short
}

func_git_clone_pz ()
{
    if [[ `git remote | grep pz` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo "<<< git clone --bare . ${REPO_GIT_URL_pz}/${BNAME}.git >>>"
        git           clone --bare . ${REPO_GIT_URL_pz}/${BNAME}.git
    fi
    echo_short
}

func_git_clone_pi ()
{
    if [[ `git remote | grep pi` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo "<<< git clone --bare . ${REPO_GIT_URL_pi}/${BNAME}.git >>>"
        git           clone --bare . ${REPO_GIT_URL_pi}/${BNAME}.git
    fi
    echo_short
}

func_git_clone_or ()
{
    if [[ `git remote | grep origin` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo "<<< git clone --bare . ${REPO_GIT_URL_or}/${BNAME}.git >>>"
        git           clone --bare . ${REPO_GIT_URL_or}/${BNAME}.git
    fi
    echo_short
}

func_git_clone_pb ()
{
    if [[ `git remote | grep pb` ]]
    then
        NAME=`pwd`
        BNAME=`basename $NAME`
        echo "<<< git clone --bare . ${REPO_GIT_URL_pb}/${BNAME}.git >>>"
        git           clone --bare . ${REPO_GIT_URL_pb}/${BNAME}.git
    fi
    echo_short
}

func_git_tree_commit ()
{
    echo_short
    echo "<<< git commit -a -m \"`date -u`\" >>>"
    git commit -a -m "`date -u`"
    echo_short
}

func_git_tree_push_or_pull ()
{
    for rpo in `git remote`
    do
        echo_short

        echo "<<< git ${COMMAND} ${rpo} ${DO_BRANCH} >>>"
        git ${COMMAND} ${rpo} ${DO_BRANCH}

        echo_short
    done
}

func_git_tree_command_branch ()
{
    CURRENT_BRANCH=`git branch --no-color | grep \*  | cut -d ' ' -f 2`
    if ! [[ -z "${BRANCH}" ]]
    then
        DO_BRANCH="${BRANCH}"
    else
        DO_BRANCH="${CURRENT_BRANCH}"
    fi
# pull          - получение изменений с сервера;
# push          - отправка изменений на сервер;
    if [[ ${COMMAND} == "push" || ${COMMAND} == "pull" ]]
    then
        func_git_tree_push_or_pull
    fi
# pullsh        - получение и отправка изменений;    
    if [[ ${COMMAND} == "pullsh" ]]
    then
        func_git_tree_pull
        func_git_tree_push
    fi
# add - добавление изменений;    
    if [[ ${COMMAND} == "add" ]]
    then
        func_git_tree_add
    fi
# commit        - фиксация изменений;    
    if [[ ${COMMAND} == "commit" ]]
    then
        func_git_tree_commit
    fi
# all           - получение изменений с сервера, добавление изменений,
#                 фиксация изменений, отправка изменений на сервер;
    if [[ ${COMMAND} == "all" ]]
    then
        func_git_tree_pull
        func_git_tree_add
        func_git_tree_commit
        func_git_tree_push
    fi
# readd         - удаление и повторное добавление удаленного
#                 репозитория pp;
    if [[ ${COMMAND} == "readd" ]]
    then
        func_git_tree_readd
    fi
# readd_pp      - удаление и повторное добавление удаленного
#                 репозитория pp;
    if [[ ${COMMAND} == "readd_pp" ]]
    then
        func_git_tree_readd_pp
    fi
# readd_pz      - удаление и повторное добавление удаленного
#                 репозитория pz;
    if [[ ${COMMAND} == "readd_pz" ]]
    then
        func_git_tree_readd_pz
    fi
# readd_pi      - удаление и повторное добавление удаленного
#                 репозитория pi;
    if [[ ${COMMAND} == "readd_pi" ]]
    then
        func_git_tree_readd_pi
    fi
# readd_or      - удаление и повторное добавление удаленного
#                 репозитория origin;
    if [[ ${COMMAND} == "readd_or" ]]
    then
        func_git_tree_readd_or
    fi
# readd_pb      - удаление и повторное добавление удаленного
#                 репозитория origin;
    if [[ ${COMMAND} == "readd_pb" ]]
    then
        func_git_tree_readd_pb
    fi    
# rm         - удаление удаленного репозитория;
    if [[ ${COMMAND} == "rm" ]]
    then
        func_git_rm
    fi
# clone    - клонирование дерева репозиториев;
    if [[ ${COMMAND} == "clone" ]]
    then
        func_git_clone
    fi    
# clone_pp - клонирование дерева репозиториев в расположение pp;    
    if [[ ${COMMAND} == "clone_pp" ]]
    then
        func_git_clone_pp
    fi
# clone_pz - клонирование дерева репозиториев в расположение pz;    
    if [[ ${COMMAND} == "clone_pz" ]]
    then
        func_git_clone_pz
    fi
# clone_pi - клонирование дерева репозиториев в расположение pi;     
    if [[ ${COMMAND} == "clone_pi" ]]
    then
        func_git_clone_pi
    fi
# clone_or - клонирование дерева репозиториев в расположение origin;    
    if [[ ${COMMAND} == "clone_or" ]]
    then
        func_git_clone_or
    fi
# clone_pb - клонирование дерева репозиториев в расположение pb;
    if [[ ${COMMAND} == "clone_pb" ]]
    then
        func_git_clone_pb
    fi    
}

func_git_tree_command ()
{
    CDIR=`pwd`
    for i in `find . -name ".git"`
    do
        echo_long_equal
        cd ${CDIR}/${i}/../
        echo "`pwd`"
        echo_long
        func_git_tree_command_branch
        echo_long_plus
    done
    cd ${CDIR}
}

####################################################################################################

func_rs_quicklisp ()
{
#   Выполняет перенос в каталог public файлов, необходимях для
#   обновления quicklisp.
    check_dir_public_html_clp_arch

    cd $HOME/quicklisp/dists
    tar -cvvJf quicklisp.tar.xz ./quicklisp/*.cdb ./quicklisp/*.txt ./quicklisp/archives/
    mv -f quicklisp.tar.xz ${PUB_HTML_CLP_ARH}
}

func_rs_pacman ()
{
    # Выполняет копирование в какалог ${PUB_HTML_CLP_ARH} пакетов и
    # файлов синхронизации, необходимях для обновления msys2.
    
    check_dir_public_html_clp_arch

    if [[ -d "${VAR_CACHE_PACMAN}" ]]
    then
        cd ${VAR_CACHE_PACMAN}
        tar -cvvJf pkg.tar.xz pkg/
        mv -f pkg.tar.xz ${PUB_HTML_CLP_ARH}
    fi

    if [[ -d "${VAR_CACHE_PACMAN}" ]]
    then
        cd ${VAR_LIB_PACMAN}
        tar -cvvJf sync.tar.xz sync/
        mv -f sync.tar.xz ${PUB_HTML_CLP_ARH}
    fi
}

func_rs_dot_emacs_d_public ()
{
    # Выполняет копирование в какалог ${PUB_HTML_CLP_ARH} файлов из
    # каталога .emacs.d.

    check_dir_public_html_clp_arch

    echo "<<< cd ${HOME} >>>"
    cd ${HOME}

    echo "<<< tar -cvvJf dot.emacs.d.tar.xz .emacs.d/ >>>"
    tar -cvvJf dot.emacs.d.tar.xz .emacs.d/

    echo "<<< mv -f dot.emacs.d.tar.xz ${PUB_HTML_CLP_ARH} >>>"
    mv -f dot.emacs.d.tar.xz ${PUB_HTML_CLP_ARH}
}

cd_git_pp_url ()
{
    echo "<<< cd $REPO_GIT_URL_pp >>>"
    cd $REPO_GIT_URL_pp
}

cd_git_pz_url ()
{
    echo "<<< cd $REPO_GIT_URL_pz >>>"
    cd $REPO_GIT_URL_pz
}

rm_rf_git ()
{
    echo "<<< rm -rf *.git >>>"
    rm -rf *.git
}

xz_pp_git ()
{
    # Распаковывает архивы git.tar.xz, содержащие репозитории git, в
    # каталоги с чистыми репозиториями для pp расположения.
    
    check_dir_git_pp
    cd_git_pp_url
    if [[ `pwd` == "$REPO_GIT_URL_pp" ]]
    then rm_rf_git
    fi
    for i in `ls ${REPO_XZ_URL_pp}/*.git.tar.xz`
    do tar -xvf $i
    done
}

xz_pz_git ()
{
    # Распаковывает архивы git.tar.xz, содержащие репозитории git, в
    # каталоги с чистыми репозиториями для pz расположения.
    
    check_dir_git_pz
    cd_git_pz_url
    if [[ `pwd` == "$REPO_GIT_URL_pz" ]]
    then rm_rf_git
    fi
    for i in `ls ${REPO_XZ_URL_pz}/*.git.tar.xz`
    do tar -xvf $i
    done
}

xz_git ()
{
    # Распаковывает архивы git.tar.xz, содержащие репозитории git, в
    # каталоги с чистыми репозиториями для pp и pz расположений.
    xz_pp_git
    xz_pz_git
}

func_reclone ()
{
# Для каталога, содержащего git-репозиторий выполняет:
#
# - проверку того, что в git-репозитории существует ссылка на
# удаленный git-репозиторий;
#
# - в случае успеха переходит в вышележащий каталог, удаляет
# git-репозиторий и затем осуществляет попытку его повторного
# клонирования.

### ToDo
### Добавить второй параметр - имя репозитория (вместо pi).
### Добавить проверку, на то что удаленный репозиторий существует.


CDIR=`pwd`

REPO_PI=`git remote | grep pi`

if [[ ${REPO_PI} ==  ${REPO_NAME_pi} ]]
then
    B_NAME=`basename $CDIR`
    echo $B_NAME
    cd ../
    rm -rf $B_NAME
    git clone $REPO_GIT_URL_pi/$B_NAME.git
    cd $B_NAME
    git remote rename origin ${REPO_NAME_pi}
fi
}

add_aliases ()
{
    git config --global alias.lg 'log --oneline --graph'
    git config --global alias.co checkout
    git config --global alias.br branch
    git config --global alias.ci commit
    git config --global alias.st status
    git config --global alias.visual '!gitk'
    git config --global alias.tree '!git-tree'
    git config --global core.editor emacs
}

####################################################################################################
#### func_git_tree
####################################################################################################

func_git_tree ()
{
    if ! [[ -z "$2" ]]
    then
        BRANCH=$2
        echo ${BRANCH}
    fi

    if [ -z "$1" ]
    then
        func_git_tree_usage_show
    else
        COMMAND=$1
        if [[ ${COMMAND} == "push"          || \
		  ${COMMAND} == "pull"      || \
                  ${COMMAND} == "pullsh"    || \
                  ${COMMAND} == "add"       || \
                  ${COMMAND} == "commit"    || \
                  ${COMMAND} == "all"       || \
                  ${COMMAND} == "readd"     || \
                  ${COMMAND} == "readd_pp"  || \
                  ${COMMAND} == "readd_pz"  || \
                  ${COMMAND} == "readd_pi"  || \
                  ${COMMAND} == "readd_or"  || \
                  ${COMMAND} == "readd_pb"  || \
                  ${COMMAND} == "rm"        || \
                  ${COMMAND} == "clone"     || \
                  ${COMMAND} == "clone_pp"  || \
                  ${COMMAND} == "clone_pz"  || \
                  ${COMMAND} == "clone_pi"  || \
                  ${COMMAND} == "clone_or"  || \
                  ${COMMAND} == "clone_pb" ]]
        then
            func_git_tree_command
	elif [[ ${COMMAND} == "quicklisp" ]]
	then
	    func_rs_quicklisp
	elif [[ ${COMMAND} == "pacman" ]]
	then
	    func_rs_pacman
	elif [[ ${COMMAND} == "dot_emacs_d" ]]
	then
	    func_rs_dot_emacs_d_public
	elif [[ ${COMMAND} == "remake_git_pp" ]]
	then
	    remake_git_pp
        elif [[ ${COMMAND} == "remake_git_pz" ]]
	then
	    remake_git_pz
	elif [[ ${COMMAND} == "remake_xz_pp" ]]
	then
	    remake_xz_pp
	elif [[ ${COMMAND} == "remake_xz_pz" ]]
	then
	    remake_xz_pz
	elif [[ ${COMMAND} == "remake_xz_pp_tar" ]]
	then
	    remake_xz_pp_tar
	elif [[ ${COMMAND} == "remake_xz_pz_tar" ]]
	then
	    remake_xz_pz_tar
        elif [[ ${COMMAND} == "xz_git" ]]
	then
	    xz_git
	elif [[ ${COMMAND} == "xz_pp_git" ]]
	then
	    xz_pp_git
        elif [[ ${COMMAND} == "xz_pz_git" ]]
	then
	    xz_pz_git
	elif [[ ${COMMAND} == "rs_local_pi" ]]
	then
	    # Выполняет синхронизацию папки ~/public_html/ с
	    # mnasoft.ddns.mksat.net.
	    rsync -Pavzhe ssh --delete ${HOME}/public_html/ namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html	    
	elif [[ ${COMMAND} == "rs_pi_local" ]]
	then
	    # Синхронизация mnasoft.ddns.mksat.net с папкой ~/public_html.
	    rsync -Pavzhe ssh --delete namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html/ ${HOME}/public_html
	elif [[ ${COMMAND} == "rs_pi_html" ]]
	then
	    # Синхронизация папки ~/public_html/Common-Lisp-Programs/ с сервером mnasoft.ddns.mksat.net
	    rsync -Pavzhe ssh --delete ~/public_html/Common-Lisp-Programs/ namatv@mnasoft.ddns.mksat.net:/usr/share/nginx/html/Common-Lisp-Programs/
	elif [[ ${COMMAND} == "reclone" ]]
	then
            func_reclone
	elif [[ ${COMMAND} == "make_git_pp" ]]
	then
            make_git_pp
	elif [[ ${COMMAND} == "make_git_pz" ]]
	then
            make_git_pz
        elif [[ ${COMMAND} == "add_aliases" ]]
	then
            add_aliases
        else
            echo "Unknown command: ${COMMAND}"
            func_git_tree_usage_show
        fi
    fi
}

####################################################################################################
#### Main 
####################################################################################################

func_git_tree ${1} ${2}
