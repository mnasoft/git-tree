
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: README
#+date: <2021-05-02 Вс>
#+author:
#+email: mnasoft@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.2 (Org mode 9.4.4)
#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:t html-style:t
#+options: html5-fancy:nil tex:t
#+html_doctype: xhtml-strict
#+html_container: div
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_equation_reference_format: \eqref{%s}
#+html_head:
#+html_head_extra:
#+subtitle:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.2 (<a href="https://orgmode.org">Org</a> mode 9.4.4)
#+latex_header:

* Назначение
 Пакет предназначен для выполнения однотипных операций на дереве
 каталогов, содержащем репозитории git.
* Установка
#+begin_src shell
   sudo ./INSTALL.run
#+end_src
* Удаление
#+begin_src shell
   sudo ./UNINSTALL.run 
#+end_src

- clp-config            - системные переменные
- git-tree              - работа с деревом репозиториев
- git-reclone           - удаление каталога, содержащего репозиторий pi и повторное его клонирование из удаленного репозитория

- clp-dot-emacs-d-pi
- rs-emacs-d - Перенос в каталог ${PUB_HTML_CLP_ARH}/ файлов из
  каталога [[~/.emacs.d]].
- remake-git-pp - Выполняет пересоздание каталога ~/git, наполняя его
  чистыми репозиториями. Поиск репозиротиев ведется в каталогах:
  ~/quicklisp/local-projects/; ~/develop/; ~/elisp/.
- func_remake_xz_pp_all            - Создает архивы git.tar.xz для мест расположения чистых репозиториев pp и pz
- xz-git               - Распаковывает архивы git.tar.xz, содержащие репозитории git, в каталоги с чистыми репозиториями для pp и pz расположений.
- rs-pacman - Выполняет перенос в папку ~/public_html/ пакетов и
  файлов синхронизации, необходимях для обновления msys2.
- rs-quicklisp - Выполняет перенос в каталог ~/public_html/ файлов,
  необходимях для обновления quicklisp.
- clp-xz-pi - Выполняет перенос на сайт pi ${PUB_HTML_CLP_ARH}/
  архивов git.tar.xz.
- clp-xz-public - Выполняет перенос в каталог ${PUB_HTML_CLP_ARH}/
  архивов git.tar.xz.

- git-tree-repo
- git-tree-temp - Содержит фрагменты кода

rs-local-pi - Синхронизация папки ~/public_html/ с с сервером mnasoft.ddns.mksat.net.
rs-pi-html  - Синхронизация папки ~/public_html/Common-Lisp-Programs/ с сервером mnasoft.ddns.mksat.net
rs-pi-local - Синхронизация mnasoft.ddns.mksat.net с папкой ~/public_html.

README.org - настоящий документ
ToDo.org 
INSTALL.log - лог установки
INSTALL.run - сценарий установки
UNINSTALL.run - сценарий удаления



* Команды
  1. Установка / Удаление
     + INSTALL.run - содержит команды установки комплекса скриптов в
       системе;
     + UNINSTALL.run - содержит команды деинталляции комплекса скриптов в
       системе;
     + INSTALL.log - содержит перечень файлов, установленных
       комплексом шрифтов в системе;
  2. Выполнение операций git на дереве коталогов
     + git-tree-repo - выполняет команду для каждого репозитория git,
       найденного в дереве каталогов, для конкретного удаленного
       репозитория.
     + git-tree - выполняет команду для каждого репозитория git,
       найденного в дереве каталогов, для всех удаленных репозиторев.
  3. Повторное клонированние с удалением
     + git-reclone - для каталога, содержащего git-репозиторий
       выполняет:
       - проверку того, что в git-репозитории существует ссылка на
         удаленный git-репозиторий;
       - в случае успеха переходит вышележащий каталог, удаляет
         git-репозиторий и затем осуществляет попытку его повторного
         клонирования.
  4. PI
     + rs-local-pi - выполняет синхронизацию папки
       ~/public_html/Common-Lisp-Programs с удаленным компьютером pi.
     + rs-pi-local - выполняет синхронизацию удаленного компьютера pi
       с папкой ~/public_html/Common-Lisp-Programs
  5. n000325
     + clp-n000325-remake-git
     + clp-n000325-remake-xz

* Примеры использования
1. Перейдите в каталог, в котором содержатся репозитории git.
2. Выполните команду
#+begin_src shell
 git-tree
#+end_src

* Граф вызовов
  #+name:dot-eg-table
  | func_remake_git_pp_all       | func_remove_git_pp            |
  | func_remake_git_pp_all       | func_remake_git_pp            |
  | func_remake_xz_pp_all        | func_remove_repo_xz_pp        |
  | func_remake_xz_pp_all        | func_remake_xz_pp             |
  | func_remake_xz_pz_all        | func_remove_repo_xz_pz        |
  | func_remake_xz_pz_all        | func_remake_xz_pz             |
  | func_clp_xz_public           | func_remake_git_pp_all        |
  | func_clp_xz_public           | func_remake_xz_pp_all         |
  | func_git_tree_push           | func_git_tree_echo_short      |
  | func_git_tree_pull           | func_git_tree_echo_short      |
  | func_git_tree_add            | func_git_tree_echo_short      |
  | func_git_tree_readd_pp       | func_git_tree_echo_short      |
  | func_git_tree_readd_pz       | func_git_tree_echo_short      |
  | func_git_tree_readd_pi       | func_git_tree_echo_short      |
  | func_git_tree_readd_or       | func_git_tree_echo_short      |
  | func_git_rm_pp               | func_git_tree_echo_short      |
  | func_git_rm_pz               | func_git_tree_echo_short      |
  | func_git_rm_pi               | func_git_tree_echo_short      |
  | func_git_rm_or               | func_git_tree_echo_short      |
  | func_git_clone_pp            | func_git_tree_echo_short      |
  | func_git_clone_pz            | func_git_tree_echo_short      |
  | func_git_clone_pi            | func_git_tree_echo_short      |
  | func_git_clone_or            | func_git_tree_echo_short      |
  | func_git_tree_commit         | func_git_tree_echo_short      |
  | func_git_tree_push_or_pull   | func_git_tree_echo_short      |
  | func_git_tree_command_branch | func_git_tree_push_or_pull    |
  | func_git_tree_command_branch | func_git_tree_pull            |
  | func_git_tree_command_branch | func_git_tree_push            |
  | func_git_tree_command_branch | func_git_tree_add             |
  | func_git_tree_command_branch | func_git_tree_commit          |
  | func_git_tree_command_branch | func_git_tree_pull            |
  | func_git_tree_command_branch | func_git_tree_add             |
  | func_git_tree_command_branch | func_git_tree_commit          |
  | func_git_tree_command_branch | func_git_tree_push            |
  | func_git_tree_command_branch | func_git_tree_readd_pp        |
  | func_git_tree_command_branch | func_git_tree_readd_pz        |
  | func_git_tree_command_branch | func_git_tree_readd_pi        |
  | func_git_tree_command_branch | func_git_tree_readd_or        |
  | func_git_tree_command_branch | func_git_rm_pp                |
  | func_git_tree_command_branch | func_git_rm_pz                |
  | func_git_tree_command_branch | func_git_rm_pi                |
  | func_git_tree_command_branch | func_git_rm_or                |
  | func_git_tree_command_branch | func_git_clone_pp             |
  | func_git_tree_command_branch | func_git_clone_pz             |
  | func_git_tree_command_branch | func_git_clone_pi             |
  | func_git_tree_command_branch | func_git_clone_or             |
  | func_git_tree_command        | func_git_tree_echo_long_equal |
  | func_git_tree_command        | func_git_tree_echo_long       |
  | func_git_tree_command        | func_git_tree_command_branch  |
  | func_git_tree_command        | func_git_tree_echo_long_plus  |
  | func_git_tree                | func_git_tree_usage_show      |
  | func_git_tree                | func_git_tree_command         |
  | func_rs_pacman               | func_clp_check_public         |
  | func_rs_dot_emacs_d_public   | func_clp_check_public         |
  | func_rs_quicklisp            | func_clp_check_public         |
  | clp-dot-emacs-d-pi           | clp-dot-emacs-public          |
  | clp-dot-emacs-d-pi           | rs-local-pi                   |
  | clp-xz-pi                    | clp-xz-public                 |
  | clp-xz-pi                    | rs-local-pi                   |
  | clp-xz-public                | func_clp_check_public         |
  | clp-xz-public                | func_clp_xz_public            |
  | git-tree                     | func_git_tree                 |
  | remake-git-pp                | func_remake_git_pp_all        |
  | remake-xz-pp                 | func_remake_xz_pp_all         |
  | remake-xz-pz                 | func_remake_xz_pz_all         |
  | rs-emacs-d                   | func_rs_dot_emacs_d_public    |
  | rs-pacman                    | func_rs_pacman                |
  | rs-quicklisp                 | func_rs_quicklisp             |

   xz-git
git-reclone
git-tree-repo
rs-local-pi
rs-pi-html
rs-pi-local


  #+name: make-dot-bak
  #+begin_src emacs-lisp :var table=dot-eg-table :results output :exports none
    (mapcar #'(lambda (x)
                (princ (format "%s [label =\"%s\", shape = \"box\"];\n"
                               (first x) (second x)))) table)
                  (princ (format "%s -- %s;\n" (first (first table)) (first (second table))))
  #+end_src

  #+name: make-dot
  #+begin_src lisp :var table=dot-eg-table :results output :exports none

    (format t "rankdir=LR;~%")
    (mapcar
     #'(lambda (x)
         (format t "~s [label =~s, shape = \"box\"];~%" x x ))
     (remove-duplicates (apply #'append table)))

    (format t "~{~{~S~^ -> ~};~%~}" table)
  #+end_src

  #+RESULTS: make-dot
  #+begin_example
  "a" [label ="a", shape = "box"];
  "Hellow" [label ="Hellow", shape = "box"];
  "b" [label ="b", shape = "box"];
  "World" [label ="World", shape = "box"];
  "c" [label ="c", shape = "box"];
  "And" [label ="And", shape = "box"];
  "d" [label ="d", shape = "box"];
  "Common see you" [label ="Common see you", shape = "box"];
  "a" -> "Hellow";
  "b" -> "World";
  "c" -> "And";
  "d" -> "Common see you";
  #+end_example

  #+begin_src dot :file ~/test-dot.png :var input=make-dot :exports results
    digraph
    {
    $input
    }
    #+end_src

    #+RESULTS:
    [[file:~/test-dot.png]]
